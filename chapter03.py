# ch03
# 코드 스타일 정립과 코드 포매팅 자동화

spam = ['dog', 'cat', 'moose'] # 올바른 포매팅
spam2 = [ 'dog'  ,'cat','moose'] # 잘못된 포메팅

# 스타일 가이드와 PEP 8
# PEP 8은 파이썬의 권위 있는 규칙 모음이다

# 가로 간격
# 들여쓰기를 이용한 공백 문자 사용
# 들여쓰기는 탭과 공백을 이용한 방식이 있다.
# 탭의 경우 시스템마다 차지하는 공간이 다르기 때문에 두가지 방식을 섞어서 사용하면 안된다.
# 또한, 탭 대신 4칸 공백을 쓰는 것이 가장 안정적이다.

# 코드 행 내의 공백 활용
# 1. 연산자와 식별자 사이에 공백 한 칸
blanks=[0]*10
i=5
blank = blanks[:i] + blanks[i + 1 :]

# 2. 구분자는 앞쪽이 아니라 뒤쪽에 공백 한 칸
weights = [42.0, 3.1415, 2.718] # O
weights = [42.0 , 3.1415 ,2.718] # X
# 3. 마침표 앞뒤에는 공백을 넣지 않는다.
'Hello'.join('.') # O
'Hello' . join('.') # X

# 3. 함수, 메소드, 컨테이너 이름 뒤에는 공백을 넣지 않는다.
print('hello world!') # O
print ('hello world!') # X
blank [:] # X
blank [2] # X

# 4. 여는 괄호 뒤와 닾는 괄호 앞에는 공백을 넣지 않는다.
print(1, 2, 3) # O
print( 1, 2, 3 ) # X

# 5. 코드행 끝의 주석 앞에는 공백 2칸
print('hello world!')  # 인사말 출력

# 세로 간격
# 코드 행 사이에 빈 행을 배치하는 것
# PEP8에서는 함수나 클래스 사이에는 두 줄의 빈 행을 넣고, 클래스 내의 메소드는 빈 행 한 줄을 넣어 구분해야 함
#######################################
class Example:
    def function1(self):
        pass

    def function2(self):
        pass


def function3():
    pass

#######################################

# 엄격한 코드 포매터, 블랙
# python -m pip install --user black
# black 모듈을 활용하면 PEP8에 맞는 코드 포매팅으로 자동 변환 가능하다
# 사용법 시스템 환경변수에 black을 추가하고 나서
# black 파일명
# python -m black 파일명
# 둘 중 하나를 입력하면 된다
