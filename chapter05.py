# ch05
# 코드 악취 감지와 대응

# 1. 중복된 코드
# 반복문, 함수를 통해서 코드의 중복은 되도록 피해야 한다.
# 보통 중복 1~2개는 괜찮지만 3개 이상이 되면 중복을 제거하는 것을 고려해야 한다.

# 2. 매직 넘버
# 의미없는 숫자를 쓰는 대신, 무언가를 설명 가능한 숫자를 이용해서 변수를 설명한다.

# 3. 주석 처리된 코드와 죽은 코드
# 프로그램 테스트를 위해 주석 처리된 코드에서 언제 다시 주석을 제거해야 할까?
# 논리적으로 절대 실행될 수 없는 코드를 죽은 코드라고 한다.
# 스텁 :아직 구현되지 않은 함수나 클래스처럼 향후 코드가 작성될 위치를 나타내는 플레이스홀더
# 혹은 미구현 함수를 호출하는 것을 막기 위해서 NotImplementdError을 사용하자
def exampleFunction():
    raise NotImplementedError

# 4. 디버깅 출력
# logging 모듈을 이용해서 실행 로그를 확인하는 것도 좋다.
import logging
logging.basicConfig(filename='file_name.txt',level=logging.DEBUG,
    format = '%(asctime)s - %(levelname)s - %(message)s')
logging.debug('This is a log message')

# 5. 숫자가 붙은 변수
# 숫자가 붙은 변수 대신에 리스트, 셋, 딕셔너리를 활용하거나 정확한 변수명을 알려주는 것이 낫다.

# 6. 그냥 함수나 모듈이어야 하는 클래스
# 클래스를 구성할 필요가 없는 경우에 클래스를 만들지 말아야 한다.

# 7. 중첩된 리스트 컴프리헨션
# 중첩된 리스트 컴프리헨션은 이해하기 어렵다. 되도록이면 풀어서 쓰도록 하자

# 8. 빈 예외 처리 블록과 부실한 에러 메시지
# try except문을 이용할 때 except에서 pass를 사용하지 마라
# 프로그램에서 발생 가능한 모든 예외를 처리하지 않으면 프로그램 개발은 완료된 것이 아니다.

# 9. 악취 코드에 관한 잘못된 통념

# 1) 함수 마지막에는 return 문이 하나만 있어야 한다?
#   오히려 그런게 더 혼란을 야기할 수 있다.
# 2) 함수에는 try문이 둘 이상 있으면 안된다?
#   함수는 작고 단순해야 한다. 하지만, 그렇다고 try문을 하나만 쓰라는 것은 아니다.
# 3) 플래그 인수는 나쁘다?
#
# 4) 전역 변수는 나쁘다?
#   전역변수를 사용하지 않는다면, 모든 인수를 함수의 인수로 넣어야 하고, 이는 코드의 복잡도를 유발한다.
#   하지만, 함수의 에러를 살피기 위해서 코드 전체를 확인해야 하는 상황이 발생하게 될 수 있어서 전역 변수는 제한해야 한다.
#   단, 변함이 없는 상수 값은 예외이다.
# 5) 주석은 불필요하다?
#   나쁜 주석은 없는 것만 못하다. 하지만, 주석이 없다면 코드를 이해하는데 많은 노력이 든다.
#   주석은 있어야 한다.

