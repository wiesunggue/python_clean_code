# ch12
# 깃을 이용한 코드 관리 기법

# 1. 커밋과 리포
# 커밋을 통해서 프로젝트 파일의 상태를 저장할 수 있음.
# 필요한 경우 이전 스냅샷으로 롤백할 수 있음.

# 2. 쿠키커터 패키지를 이용한 새로운 파이썬 프로젝트 생성
# 작업 디렉토리 : 프로젝트와 관련된 모든 소스 코드, 문서, 테스트, 기타 파일이 들어있는 폴더
# 혹은 작업 트리, 프로젝트 폴더라고 부름
# 작업 사본 : 작업 디렉터리에 있는 파일

# 일반 정보는 README.md에 저장
# 코드 커버리지 설정 coveragerc
# 프로젝트의 소프트웨어 라이센스는 LICENSE.txt에 포함된다

# cookiecutter 파이썬 모듈을 활용하면 반복적인 파일과 폴더를 생성하여 시간을 줄일 수 있다.
# 추가 내용은 인터넷을 찾아보자

# git 설치

# git 명령어
# git init이나 git clone을 통해서 깃 리포를 생성
# git 리포를 관리하는 git add <파일명> 명령어
# git commit -am "커밋 메시지" 명령어를 통해서 커밋

# git help <명령어> 를 활용하면 사용법을 알 수 있다.
# git이 관리하는 파일은 리포에 추가되어 커밋된 파일을 말한다.

# 커밋된 상태 : 작업 사본에 있는 파일이 리포의 가장 최근 커밋과 동일한 상황을 말한다.
# 수정된 상태 : 작업 사본에 있는 파일이 리포의 가장 최근 커밋과 다른 상태다
# 스테이징 상태 : 파일을 수정하여 다음 커밋에 포함되도록 표시한 상태이다.

# git status를 통해서 리포의 현재 상태와 리포에 속한 파일의 상태를 확인할 수 있다.

# 파일을 스테이징 상태로 바꿔야 하는 경우
# 스테이징을 진행하고, 수정된 파일을 한번에 커밋함으로써 복잡성을 피하는 방식으로 이용하면
# 수정된 상태에서 정리된 상태로의 이동이 자유롭다.


# 자신의 컴퓨터에 깃 리포 만들기
# 깃은 분산 버전 관리 시스템으로 자신의 모든 스냅샷과 리포 메타데이터를 .git이라는 폴더에 로컬로 저장한다.
# 커밋을 하기 위해서 인터넷이 필요 없다.

# git init을 통해서 폴더를 깃 리포로 변환하면 해당 폴더에 있는 모든 파일은 관리대상이 아닌 상태로 시작한다.
# 사용자의 컴퓨터에 있는 리포 : 로컬 리포
# 다른 사용자의 컴퓨터에 있는 리포 : 원격 리포

# git으로 파일을 추가해 관리하기
# TODO 이후 내용은 다음에 하자